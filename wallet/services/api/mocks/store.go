// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/sbuttigieg/test-quik-tech/wallet/models"
	"github.com/sbuttigieg/test-quik-tech/wallet/services/api"
	"github.com/shopspring/decimal"
	"sync"
)

// Ensure, that StoreMock does implement api.Store.
// If this is not the case, regenerate this file with moq.
var _ api.Store = &StoreMock{}

// StoreMock is a mock implementation of api.Store.
//
// 	func TestSomethingThatUsesStore(t *testing.T) {
//
// 		// make and configure a mocked api.Store
// 		mockedStore := &StoreMock{
// 			ActivePlayerFunc: func(s string) (*models.Player, error) {
// 				panic("mock out the ActivePlayer method")
// 			},
// 			GetPlayerFunc: func(s string) (*models.Player, error) {
// 				panic("mock out the GetPlayer method")
// 			},
// 			NewTransactionFunc: func(transaction models.Transaction) (*models.Transaction, error) {
// 				panic("mock out the NewTransaction method")
// 			},
// 			UpdatePlayerBalanceFunc: func(s string, decimalMoqParam decimal.Decimal) (*decimal.Decimal, error) {
// 				panic("mock out the UpdatePlayerBalance method")
// 			},
// 		}
//
// 		// use mockedStore in code that requires api.Store
// 		// and then make assertions.
//
// 	}
type StoreMock struct {
	// ActivePlayerFunc mocks the ActivePlayer method.
	ActivePlayerFunc func(s string) (*models.Player, error)

	// GetPlayerFunc mocks the GetPlayer method.
	GetPlayerFunc func(s string) (*models.Player, error)

	// NewTransactionFunc mocks the NewTransaction method.
	NewTransactionFunc func(transaction models.Transaction) (*models.Transaction, error)

	// UpdatePlayerBalanceFunc mocks the UpdatePlayerBalance method.
	UpdatePlayerBalanceFunc func(s string, decimalMoqParam decimal.Decimal) (*decimal.Decimal, error)

	// calls tracks calls to the methods.
	calls struct {
		// ActivePlayer holds details about calls to the ActivePlayer method.
		ActivePlayer []struct {
			// S is the s argument value.
			S string
		}
		// GetPlayer holds details about calls to the GetPlayer method.
		GetPlayer []struct {
			// S is the s argument value.
			S string
		}
		// NewTransaction holds details about calls to the NewTransaction method.
		NewTransaction []struct {
			// Transaction is the transaction argument value.
			Transaction models.Transaction
		}
		// UpdatePlayerBalance holds details about calls to the UpdatePlayerBalance method.
		UpdatePlayerBalance []struct {
			// S is the s argument value.
			S string
			// DecimalMoqParam is the decimalMoqParam argument value.
			DecimalMoqParam decimal.Decimal
		}
	}
	lockActivePlayer        sync.RWMutex
	lockGetPlayer           sync.RWMutex
	lockNewTransaction      sync.RWMutex
	lockUpdatePlayerBalance sync.RWMutex
}

// ActivePlayer calls ActivePlayerFunc.
func (mock *StoreMock) ActivePlayer(s string) (*models.Player, error) {
	if mock.ActivePlayerFunc == nil {
		panic("StoreMock.ActivePlayerFunc: method is nil but Store.ActivePlayer was just called")
	}
	callInfo := struct {
		S string
	}{
		S: s,
	}
	mock.lockActivePlayer.Lock()
	mock.calls.ActivePlayer = append(mock.calls.ActivePlayer, callInfo)
	mock.lockActivePlayer.Unlock()
	return mock.ActivePlayerFunc(s)
}

// ActivePlayerCalls gets all the calls that were made to ActivePlayer.
// Check the length with:
//     len(mockedStore.ActivePlayerCalls())
func (mock *StoreMock) ActivePlayerCalls() []struct {
	S string
} {
	var calls []struct {
		S string
	}
	mock.lockActivePlayer.RLock()
	calls = mock.calls.ActivePlayer
	mock.lockActivePlayer.RUnlock()
	return calls
}

// GetPlayer calls GetPlayerFunc.
func (mock *StoreMock) GetPlayer(s string) (*models.Player, error) {
	if mock.GetPlayerFunc == nil {
		panic("StoreMock.GetPlayerFunc: method is nil but Store.GetPlayer was just called")
	}
	callInfo := struct {
		S string
	}{
		S: s,
	}
	mock.lockGetPlayer.Lock()
	mock.calls.GetPlayer = append(mock.calls.GetPlayer, callInfo)
	mock.lockGetPlayer.Unlock()
	return mock.GetPlayerFunc(s)
}

// GetPlayerCalls gets all the calls that were made to GetPlayer.
// Check the length with:
//     len(mockedStore.GetPlayerCalls())
func (mock *StoreMock) GetPlayerCalls() []struct {
	S string
} {
	var calls []struct {
		S string
	}
	mock.lockGetPlayer.RLock()
	calls = mock.calls.GetPlayer
	mock.lockGetPlayer.RUnlock()
	return calls
}

// NewTransaction calls NewTransactionFunc.
func (mock *StoreMock) NewTransaction(transaction models.Transaction) (*models.Transaction, error) {
	if mock.NewTransactionFunc == nil {
		panic("StoreMock.NewTransactionFunc: method is nil but Store.NewTransaction was just called")
	}
	callInfo := struct {
		Transaction models.Transaction
	}{
		Transaction: transaction,
	}
	mock.lockNewTransaction.Lock()
	mock.calls.NewTransaction = append(mock.calls.NewTransaction, callInfo)
	mock.lockNewTransaction.Unlock()
	return mock.NewTransactionFunc(transaction)
}

// NewTransactionCalls gets all the calls that were made to NewTransaction.
// Check the length with:
//     len(mockedStore.NewTransactionCalls())
func (mock *StoreMock) NewTransactionCalls() []struct {
	Transaction models.Transaction
} {
	var calls []struct {
		Transaction models.Transaction
	}
	mock.lockNewTransaction.RLock()
	calls = mock.calls.NewTransaction
	mock.lockNewTransaction.RUnlock()
	return calls
}

// UpdatePlayerBalance calls UpdatePlayerBalanceFunc.
func (mock *StoreMock) UpdatePlayerBalance(s string, decimalMoqParam decimal.Decimal) (*decimal.Decimal, error) {
	if mock.UpdatePlayerBalanceFunc == nil {
		panic("StoreMock.UpdatePlayerBalanceFunc: method is nil but Store.UpdatePlayerBalance was just called")
	}
	callInfo := struct {
		S               string
		DecimalMoqParam decimal.Decimal
	}{
		S:               s,
		DecimalMoqParam: decimalMoqParam,
	}
	mock.lockUpdatePlayerBalance.Lock()
	mock.calls.UpdatePlayerBalance = append(mock.calls.UpdatePlayerBalance, callInfo)
	mock.lockUpdatePlayerBalance.Unlock()
	return mock.UpdatePlayerBalanceFunc(s, decimalMoqParam)
}

// UpdatePlayerBalanceCalls gets all the calls that were made to UpdatePlayerBalance.
// Check the length with:
//     len(mockedStore.UpdatePlayerBalanceCalls())
func (mock *StoreMock) UpdatePlayerBalanceCalls() []struct {
	S               string
	DecimalMoqParam decimal.Decimal
} {
	var calls []struct {
		S               string
		DecimalMoqParam decimal.Decimal
	}
	mock.lockUpdatePlayerBalance.RLock()
	calls = mock.calls.UpdatePlayerBalance
	mock.lockUpdatePlayerBalance.RUnlock()
	return calls
}
